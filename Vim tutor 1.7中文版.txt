# Vim tutor 1.7

================================================================
 欢迎使用 VIM 教程 - 版本 1.7
================================================================
Vim 是一个非常强大的editor，有许多commands，其中太多commands无法在这样的教程中一一解释。本教程旨在描述足够多的commands，以使您能够轻松使用 Vim 作为all-purpose editor。
完成本教程所需的大致时间是25-30分钟，具体取决于您在experimentation中花费的时间。

注意：
教程中的commands将修改text。请复制此文件以进行练习（如果您已经启动了 "vimtutor"，那么这已经是一个副本）。
重要的是要记住，这个教程是通过实践来教学的。这意味着您需要执行commands才能正确地学习它们。如果您只是阅读text，您会忘记这些commands！

现在，请确保您的 Shift-Lock 键没有按下，并按下 j 键足够多次，将光标移动到屏幕上完整显示第1.1节的位置。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
第 1.1 节：移动光标
** 要移动光标，请按照指示按下 h、j、k、l 键。 **
     ^
     k
< h     l > 
     j
     v
1. 在屏幕上移动光标，直到您感到熟悉。
2. 按住向下键（j）直到it repeats。现在您知道如何进入下一节lesson了。
3. 使用向下键，移动到第 Lesson 1.2 。

注意：如果您对自己键入的内容感到不确定，按下 <ESC> 键进入正常模式。然后重新键入您想要的commands。
注意：光标键也可以使用。但是一旦您习惯了使用 hjkl 键，您将能够更快地移动。真的！

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第 1.2 节：退出 Vim
!! 注意：在执行以下步骤之前，请阅读整个本节内容！!

1. 按下 <ESC> 键（确保您处于正常模式）。
2. 输入：:q! <回车>。
   这将退出编辑器，并丢弃您所做的任何更改。	

3. 当您看到 shell 提示符时，键入进入此教程的commands。
   即：vimtutor <回车>
4. 如果您已经记住这些步骤并且有信心，请执行步骤 1 至 3 以退出和重新进入编辑器。

注意：:q! <回车> 将丢弃您所做的任何更改。在后面的几节中，您将学习如何保存对文件的更改。
5. 移动光标至Lesson 1.3>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lesson 1.3: text编辑 - 删除

** 按下 x 键删除光标前面的字符。 ** 

1. 将光标移动到下面标记为--->的行上方。
2. 为了修正错误，将光标移动到需要删除的字符上方。
3. 按下 x 键删除不需要的字符。
4. 重复步骤 2 到 4，直到句子正确为止。 ---> The ccow jumpedd ovverr thhe mooon.
5. 现在该行已经正确，继续进行第 1.4 节。 注意：在学习过程中，请不要试图记忆，要通过使用来学习。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lesson 1.4: text编辑 - 插入
** 按下 i 键插入text。 **
1. 将光标移动到下面标记为--->的第一行上。
2. 为了使第一行与第二行相同，将光标移动到需要插入text的位置之后的第一个字符上方。
3. 按下 i 键并输入所需的添加内容。
4. 在修正每个错误后，按下 <ESC> 键返回到普通模式。重复步骤 2 到 4 来纠正句子。 
---> There is text misng this .
---> There is some text missing from this line.
5. 当你对插入text感到熟悉时，继续进行第 1.5 节。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lesson 1.5: text编辑 - 附加，增补
** 按下 A 键追加text。 **
1. 将光标移动到下面标记为--->的第一行上方。光标在该行的任何字符上都可以。
2. 按下 A 键并输入所需的添加内容。
3. 当text被追加后，按下 <ESC> 键返回到普通模式。
4. 将光标移动到标记为--->的第二行，并重复步骤 2 和 3 来修正该句子。
---> There is some text missing from th 
     There is some text missing from this line. 
---> There is also some text miss
     There is also some text missing here.

5. 当你熟悉添加text后，进入第1.6课。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第1.6课：编辑文件

** 使用 :wq commands保存文件并退出。 **

!! 注意：在执行下面的步骤之前，请阅读整个课程内容 !!

1. 退出本教程，就像在第1.2课中所做的一样：输入 :q!
   或者，如果你有另一个终端可用，在那里执行以下操作。

2. 在 shell 提示符下输入以下commands：vim tutor <回车>
   'vim' 是启动 Vim 编辑器的commands，'tutor' 是要编辑的文件名。选择一个可更改的文件。

3. 插入和删除text，就像你在之前的课程中学到的那样。

4. 保存带有更改的文件并退出 Vim：输入 :wq <回车>

5. 如果你在步骤1中退出了 vimtutor，请重新启动 vimtutor 并向下移动到以下摘要。

6. 在阅读了上述步骤并理解它们之后：去做吧。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第1课总结：

1. 使用箭头键或 hjkl 键移动光标。h（左） j（下） k（上） l（右）

2. 从 shell 提示符中启动 Vim，输入：vim FILENAME <回车>

3. 退出 Vim 的方法：
   <ESC> :q! <回车>（放弃所有更改）
   或者键入 <ESC> :wq  <回车>（保存更改）

4. 删除光标处的字符，输入：x

5. 插入或追加text的方法：
   i 输入要插入的text <ESC>	在光标之前插入
   A 输入要追加的text <ESC>	在行之后追加
   

   注意：按下 <ESC> 会进入正常模式，或者取消一个不需要的或部分完成的commands。

现在继续进行第2课。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第2.1课：删除commands

** 输入 dw 删除一个单词。**

1. 按下 <ESC>来确保处于正常模式下。

2. 将光标移动到下面标记为 ---> 的行下方。

3. 将光标移动到需要删除的单词的开头位置。

4. 输入dw以使单词消失。
注意：当你输入d时，字母d将出现在屏幕的最后一行。Vim正在等待你输入w。如果你看到的是除了d之外的其他字符，说明你输入了错误的内容；按下<ESC>键并重新开始。
---> There are a some words fun that don't belong paper in this sentence.

5. 重复步骤3和步骤4，直到句子正确，并进入第2.2课程。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
第2.2课程：更多删除commands

** 输入d$以删除到行尾。**

1. 按下<ESC>键，确保你处于正常模式下。

2. 将光标移动到下面标记为--->的行上。

3. 将光标移动到正确行的末尾（在第一个.之后）。

4. 输入d$以删除到行尾。

---> 有人在这一行的末尾重复了这一行的末尾。

5. 继续进行第2.3课程，了解发生了什么。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
第2.3课：关于operator(operator)和动作(motion)

许多改变text的commands由一个operator(operator)(operator)和一个动作(motion)组成。使用d这个删除operator(operator)
(operator)的删除commands的格式如下：

d 动作(motion)

其中：

- d是删除operator(operator)。

- 动作(motion)是operator(operator)将要操作的对象（列在下面）。

以下是一小部分动作(motion)的列表：

  - w：直到下一个单词的开头，但不包括第一个字符。

  - e：直到当前单词的末尾，包括最后一个字符。

  - $：直到行尾，包括最后一个字符。

因此，输入de将删除从光标到单词末尾的内容。

注意：在正常模式下，只按动作(motion)而不带operator(operator)会将光标移动到指定位置。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
第2.4课程：使用计数来重复动作(motion)

** 在动作(motion)之前输入一个数字，可以重复执行该动作(motion)多次。**

1. 将光标移动到下面标记为--->的行的开头。

2. 输入2w以将光标向前移动两个单词。

3. 输入3e以将光标移动到第三个单词的末尾。

4. 输入0（零）以移动到行的开头。

5. 重复步骤2和3，并使用不同的数字。

---> This is just a line with words you can move around in.
 
6. 进入2.5课程。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2.5课程：使用计数进行更多删除

**键入一个数字以及能够重复数字那么多次的operator(operator)**

在上述提到的删除operator(operator)和移动操作的组合中，您可以在移动之前插入一个计数来删除更多内容：
d 数字 运动 

1. 将光标移动到标记为--->的行中的第一个大写单词。

2. 输入d2w以删除两个大写单词。

3. 重复步骤1和2，使用不同的计数来一次删除连续的大写单词。

---> 这些 ABC DE 行 FGHI JK LMN OP of words is Q RS TUV cleaned up.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2.6课程：对行进行操作

** 输入dd以删除整行。 **

由于经常需要删除整行，Vi的设计者决定只需输入两个d即可删除一行。

1. 将光标移动到下面短语的第二行。

2. 输入dd以删除该行。

3. 现在移动到第四行。

4. 输入2dd以删除两行。

---> 1）玫瑰是红色的，
---> 2）泥巴很有趣，
---> 3）紫罗兰是蓝色的，
---> 4）我有一辆车，
---> 5）时钟显示时间，
---> 6）糖很甜，
---> 7）你也是。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2.7课程：撤销命令

**按下u可以撤销最后的命令，按下U可以修复整行。**

1. 将光标移动到下面标记为--->的行，并将其放置在第一个错误上。

2. 键入x以删除第一个不需要的字符。

3. 现在键入u以撤销执行的最后一个命令。

4. 这次使用x命令修复行上的所有错误。

5. 现在键入大写的U将该行恢复到原始状态。

6. 现在连续键入u几次以撤销U和之前的命令。

7. 现在连续按下CTRL-R键（按住CTRL键，同时按下R键）几次以重做命令（undo the undo's）。
---> 修复这一行上的错误，并将其替换为undo。

8. 这些命令非常有用。现在继续进行第2课的总结。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
第2课总结

1. 要从光标删除到下一个单词，请键入：dw

2. 要从光标删除到行尾，请键入：d$

3. 要删除整行，请键入： dd

4. 要重复一个动作，请在其前面加上一个数字：2w 

5. 更改命令的格式为：
operator  [number]， motion

其中：
operator - 是要执行的操作，例如d表示删除 

[number] - 是可选的重复次数 

motion - 用于移动到要操作的文本上，例如w（word）、$（to the end of line）等等。

6. 要移到行的开头，请使用零：0 

7. 要撤销先前的操作，请键入：u（小写的u）
     要撤销一行上的所有更改，请键入：U（大写的U）
     要撤销撤销的操作，请键入： CTRL-R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第3.1课：PUT命令

**键入p将之前删除的文本放置在光标后面。**
1. 将光标移动到下面第一个--->行。

2. 键入dd以删除该行并将其存储在Vim寄存器中。

3. 将光标移动到c）行，在被删除的行应放置的上方。

4. 键入p将该行放置在光标下面。

5. 重复步骤2至4，以按正确的顺序放置所有行。
---> d）你也可以学习吗？
---> b）紫罗兰是蓝色的，
---> c）智力是可以学习的，
---> a）玫瑰是红色的，
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第3.2课：REPLACE命令

**键入rx将光标处的字符替换为x。** 

1. 将光标移动到下面第一行标记为--->的行。

2. 将光标移动到第一个错误上方。

3. 键入r，然后键入应该在那里的字符。

4. 重复步骤2和3，直到第一行与第二行相等。

---> 当输入这一行时，有人按下了一些错误的键！
---> 当输入这一行时，有人按下了一些错误的键！

5. 现在继续进行第3.3课。

注意：记住你应该通过实践学习，而不是死记硬背。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
第3.3课：更改operator(operator)

**要更改直到单词的末尾，请键入ce。** 

1. 将光标移动到下面第一行标记为--->的行。

2. 将光标放在lubw中的u上。

3. 键入ce，然后输入正确的单词（在这种情况下，键入ine）。

4. 按下<ESC>并移动到需要更改的下一个字符。

5. 重复步骤3和4，直到第一句与第二句相同。

---> 这个lubw有一些wptfd需要使用更改operator(operator)进行更改。
---> 这一行有一些需要使用更改operator(operator)进行更改的单词。

注意ce会删除单词并将你置于插入模式。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第3.4课：使用c进行更多更改

**更改operator(operator)与删除operator(operator)使用相同的动作(motion)。** 

1. 更改operator(operator)与删除operator(operator)的工作方式相同。其格式为：
c [number] motion

2. 动作(motion)与删除操作相同，例如w（单词）和$（行尾）。

3. 移动到下面第一行标记为--->的行。

4. 将光标移动到第一个错误上。

5. 键入c$，然后键入与第二行相同的剩余部分并按下<ESC>。

---> The end of this line needs some help to make it like the second. 
---> The end of this line needs to be corrected using the c$ command.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lesson 3 总结
1. 要恢复刚刚删除的文本，请键入p。这会将删除的文本放置在光标之后（如果删除了一行，则会放置在光标下一行）。

2. 要替换光标下的字符，请键入r，然后键入要替换的字符。

3. 更改operator允许您从光标位置更改到运动所带您到达的位置。例如，键入ce以从光标位置更改到单词的末尾，键入c$以更改到行的末尾。

4. 更改的格式为：c [number] motion。

现在继续进行下一课。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第4.1课：光标位置和文件状态

**  键入CTRL-G以显示文件中的位置和文件状态。
    键入G以移动到文件中的某一行。**

注意：在执行任何步骤之前，请阅读整个课程！

1. 按住Ctrl键，然后按下g键。我们称之为CTRL-G。
   页面底部将显示带有文件名和文件中的位置的消息。为了第3步，记住行号。

注意：当设置了'ruler'选项(option)，您可能会在屏幕右下角看到光标位置（参见:help 'ruler'）。 

2. 按下G将您移动到文件底部。键入gg将您移动到文件的开头。 

3. 先输入行号，然后按下G。这将使您返回到首次按下CTRL-G时所在的行。 

4. 如果您有信心执行这个操作，请执行第1到第3步。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第4.2课：搜索命令

**键入/，然后输入要搜索的短语以进行搜索。**

1. 在正常模式下，键入/字符。注意，它和光标会像使用：命令一样出现在屏幕底部。

2. 现在键入'errroor'<回车>。这是您要搜索的词语。

3. 要再次搜索相同的短语，只需键入n。
   要在相反方向搜索相同的短语，请键入N。

4. 要在向后方向（就是向上）搜索短语，请使用?而不是/。

5. 要返回到来的位置，请按下CTRL-O（向上）（按住Ctrl键同时按下字母o）。重复按下以进一步返回。CTRL-I向前（向下）移动。

---> "errroor" is not the way to spell error; errroor is an error. 

注意：当搜索到达文件末尾时，它将继续从开头进行搜索，除非已重置'wrapscan'选项。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
在Vim中，使用命令符号"/"和"?"进行搜索，它们具有以下区别：

"/"用于向前搜索：当您使用命令"/"后跟一个短语时，Vim将从当前光标位置开始向文件末尾的方向搜索该短语。

"?"用于向后搜索：当您使用命令"?"后跟一个短语时，Vim将从当前光标位置开始向文件开头的方向搜索该短语。

在Vim中，CTRL-O和CTRL-I是用于在编辑过程中导航和跳转的快捷键，它们具有以下区别：

CTRL-O (Ctrl键+字母O)：它用于返回到更早的位置。当您按下CTRL-O时，Vim将返回到之前导航过的位置，即使在不同的文件或窗口之间切换，也可以正确地返回到之前的位置。

CTRL-I (Ctrl键+字母I)：它用于向前移动到更新的位置。当您按下CTRL-I时，Vim将移动到较新的位置，即跳转到之前导航过的位置的后续位置，如果之前使用了CTRL-O返回到较早的位置，则可以使用CTRL-I返回到较新的位置。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
第4.3课：匹配括号搜索

** 键入%以查找匹配的)，]或}。** 

1. 将光标放在下面标记为--->的行中的任何(、[或{上。

2. 现在键入%字符。

3. 光标将移动到匹配的括号或方括号上。

4. 键入%以将光标移动到另一个匹配的方括号上。

5. 将光标移动到另一个(、)、[、]、{或}上，观察%的作用。
---> 这是一行测试文本，其中包含('s、['s ]和{'s }。

注意：这在调试具有不匹配括号的程序时非常有用！

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第4.4课：替换命令

**键入:s/old/new/g以将'new'替换为'old'。** 

1. 将光标移动到下面标记为--->的行上。

2. 键入:s/thee/the<回车>。注意，此命令仅更改行中第一次出现的"thee"。

3. 现在键入:s/thee/the/g。添加g标志表示在行中全局替换，更改行中所有出现的"thee"。

---> thee best time to see thee flowers is in thee spring.

4. 要更改两行之间每个字符串出现的所有情况，请键入:#,#s/old/new/g       其中 #,# 是替换操作要执行的行范围的行号
或者
:%s/old/new/g         要在整个文件中更改每个出现的内容
或者
:%s/old/new/gc	      在整个文件中查找每个出现的内容，并在是否进行替换的提示下进行操作。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第4课总结
1. CTRL-G显示文件中的位置和文件状态。
   G移动到文件末尾。
   number G移动到指定行号。
     gg移动到第一行。
2. 键入/，后跟一个短语，向前搜索该短语。
      在输入短语后键入问号"?"会向后搜索该短语。
      在搜索完成后，使用字母"n"可以在同一方向上查找下一个匹配项，使用大写字母"N"可以在相反方向上进行搜索。
      按下CTRL-O将返回到较早的位置，按下CTRL-I将前进到较新的位置。

3. 当光标位于"(", ")", "[", "]", "{", 或 "}"时，键入百分号"%"将定位到与之匹配的符号。

4. 若要将新内容替换为一行中的第一个旧内容，请键入:s/old/new。
     要替换一行中所有的"old"，请键入:s/old/new/g。
     要替换两行之间的短语，请键入:#,#s/old/new/g。
     要在整个文件中替换所有的出现，请键入:%s/old/new/g。
     若每次替换时需要确认，请添加"c"选项。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第5.1课：如何执行外部命令

** 在冒号后面输入！再加上一个外部命令来执行该命令。 **

1. 输入熟悉的冒号命令以将光标置于屏幕底部。这允许您输入命令行命令。

2. 现在输入感叹号字符！。这允许您执行任何外部的 shell 命令。

3. 作为示例，在感叹号后面输入 ls，然后按回车键。这将显示您的目录列表，就像您在 shell 提示符下一样。如果 ls 不起作用，可以使用 :!dir。

注意：您可以通过此方式执行任何外部命令，包括带参数的命令。

注意：所有的冒号命令必须在按下回车键之前完成。从现在开始，我们将不再一直提及这一点。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第5.2课：更多关于写入文件

** 要保存对文本所做的更改，请输入 :w 文件名。 **

1. 输入 :!dir 或者 :!ls 以获取您的目录列表。您已经知道在此之后必须按下回车键。

2. 选择一个尚不存在的文件名，例如 TEST。

3. 现在输入：
		:w TEST（其中 TEST 是您选择的文件名）。

4. 这将把整个文件（Vim 教程）保存为 TEST 这个文件名。要验证，请再次输入 :!dir 或者 :!ls 来查看您的目录。
注意：如果您退出 Vim 并使用 vim TEST 再次启动它，那么该文件将是您保存时教程的精确副本。

5. 现在通过输入（Windows）: :!del TEST 
   或者（Unix）: :!rm TEST 来删除该文件。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第5.3课：选择文本来write

** 要保存文件的一部分，请输入 v motion :w 文件名 **

1. 将光标移动到此行。

2. 按下 v 键，然后将光标移动到下方的第五个项目。注意文本被突出显示。

3. 按下冒号（:）字符。屏幕底部将显示 :'<,'>。

4. 输入 w TEST，其中 TEST 是一个尚不存在的文件名。在按下回车键之前，请确认你看到 :'<,'>w TEST。

5. Vim 将选定的行写入文件 TEST。使用 :!dir 或 :!ls 命令查看它。暂时不要删除它！我们将在下一课中使用它。

注意：按下 v 键会启动可视选择。你可以移动光标来扩大或缩小选择范围。然后，你可以使用operator对文本进行操作。例如，d 用于删除文本。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

课程 5.4：检索和合并文件


** 要插入文件的内容，请输入 :r 文件名 **

1. 将光标放在此行的上方。

注意：在执行第 2 步后，你将看到来自课程 5.3 的文本。然后向下移动以再次查看本课程。

2. 现在使用命令 :r TEST 检索你的 TEST 文件，其中 TEST 是你使用的文件名。
   检索的文件将被放置在光标行的下方。

3. 要验证文件是否被检索，将光标移到前面并注意现在有两份课程 5.3 的副本，原始版本和文件版本。

注意：你还可以读取外部命令的输出。例如，:r !ls 读取 ls 命令的输出并将其放置在光标下方。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第5课总结：

1.  :!command  执行外部命令。

      一些有用的示例：
      （Windows）    （Unix）
      :!dir          :!ls          -  显示directory列表。
      :!del FILENAME :!rm FILENAME -  删除文件 FILENAME。

2.  :w FILENAME  将当前的 Vim 文件保存到名为 FILENAME 的磁盘文件中。

3.  v  motion  :w FILENAME  将可视选择的行保存到文件 FILENAME 中。

4.  :r FILENAME  检索磁盘文件 FILENAME，并将其放置在光标位置下方。

5.  :r !dir  读取 dir 命令的输出，并将其放置在光标位置下方。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第6.1课：打开命令

** 输入 o 打开光标下方的一行并进入插入模式。**

1. 将光标移动到下方标有 ---> 的第一行。

2. 输入小写字母 o，打开光标下方的一行并进入插入模式。

3. 现在输入一些文本，然后按 <ESC> 键退出插入模式。

---> 输入 o 后，光标将位于打开的行上，进入插入模式。

4. 要在光标上方打开一行，只需输入大写字母 O，而不是小写字母 o。在下方的行上尝试一下。

---> 在光标所在行上方输入 O，打开一行。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第6.2课：追加命令


** 输入 a 在光标后插入文本。**

  1. 将光标移动到下方标有 ---> 的第一行的开头。

  2. 按下 e 键直到光标位于 li 的末尾。

  3. 输入小写字母 a，在光标后追加文本。

  4. 完成像下方一行中的单词。按 <ESC> 键退出插入模式。

  5. 使用 e 键移动到下一个未完成的单词，然后重复步骤 3 和 4。

---> This li will allow you to pract appendi text to a line.
---> This line will allow you to practice appending text to a line.

注意：a、i 和 A 都进入相同的插入模式，唯一区别是插入的位置不同。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第6.3课：替换的另一种方式


** 输入大写字母 R 以替换多个字符。**

  1. 将光标移动到下方标有 ---> 的第一行。将光标移动到第一个 xxx 的开头。

  2. 现在按下 R 键，并在第二行中键入下方的数字，以替换 xxx。

  3. 按下 <ESC> 键离开替换模式。注意，该行的其余部分保持不变。

  4. 重复上述步骤，替换剩下的 xxx。

---> Adding 123 to xxx gives you xxx.
---> Adding 123 to 456 gives you 579.

注意：替换模式类似于插入模式，但每个键入的字符都会删除一个已有字符。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第6.4课：复制和粘贴文本


** 使用 y operator复制文本，使用 p 进行粘贴 **

  1. 移动到下方标有 ---> 的行，在 "a)" 后面放置光标。

  2. 使用 v 进入可视模式，并将光标移动到 "first" 前面。

  3. 输入 y 以复制高亮显示的文本。

  4. 将光标移动到下一行的末尾：j$

  5. 输入 p 以粘贴文本。然后输入：a second <ESC>。

  6. 使用可视模式选择 " item."，使用 y 进行复制，使用 j$ 移动到下一行的末尾，然后使用 p 将文本放置在那里。

--->  a) this is the first item.
      b)

注意：您还可以将 y 用作operator：yw 复制一个单词，yy 复制整行，然后 p 将复制的行粘贴出来。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

第6.5课：设置option

**设置option以使搜索或替换忽略大小写**

1. 通过输入命令进行搜索 'ignore'：/ignore <回车>
   通过按下 n 键多次重复搜索。

2. 通过输入命令设置 'ic'（忽略大小写）选项：:set ic

3. 现在再次搜索 'ignore'，按下 n 键
   注意现在还会找到 Ignore 和 IGNORE。

4. 设置 'hlsearch' 和 'incsearch' 选项：:set hls is

5. 现在再次输入搜索命令，看看会发生什么：/ignore <回车>

6. 要禁用忽略大小写，请输入：:set noic

注意：要取消匹配的高亮显示，请输入：:nohlsearch
注意：如果只想针对单个搜索命令忽略大小写，在短语中使用 \c：/ignore\c <回车>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
第6节总结

1. 输入 o 可以在光标下方打开一行并进入插入模式。
   输入 O 可以在光标上方打开一行并进入插入模式。

2. 输入 a 可以在光标后插入文本。
   输入 A 可以在行尾插入文本。

3. 命令 e 将光标移动到单词的末尾。

4. 运算符 y 可以复制（yank）文本，p 可以粘贴（put）它。

5. 输入大写字母 R 进入替换模式，直到按下 <ESC> 键。

6. 输入 ":set xxx" 可以设置选项 "xxx"。一些选项包括：
   'ic' 'ignorecase' 在搜索时忽略大小写
   'is' 'incsearch' 显示搜索短语的部分匹配
   'hls' 'hlsearch' 高亮显示所有匹配短语
   可以使用长选项名称或短选项名称。

7. 在选项前添加 "no" 来关闭该选项：:set noic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

第7.1节: 获取帮助

** 使用在线帮助系统 	**

Vim拥有全面的在线帮助系统。要开始使用，请尝试以下三种方法之一：
- 按下<HELP>键（如果您有）
- 按下<F1>键（如果您有）
- 输入 :help <ENTER>

阅读帮助窗口中的文本以了解帮助的使用方法。
输入 CTRL-W CTRL-W 可以在窗口之间切换。
输入 :q <ENTER> 可以关闭帮助窗口。

通过给":help"命令提供参数，您可以找到关于几乎任何主题的帮助。尝试以下命令（不要忘记按下<ENTER>）：

:help w
:help c_CTRL-D
:help insert-index
:help user-manual
第7节：创建启动脚本
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
第7.2节: 创建startup script
** 启用Vim功能 **

Vim比Vi有更多的功能，但大多数功能默认情况下是禁用的。要开始使用更多功能，您应该创建一个"vimrc"文件。

1. 开始编辑"vimrc"文件。具体操作取决于您的系统：
   - :e ~/.vimrc    （Unix系统）
   - :e ~/_vimrc    （Windows系统）

2. 现在读取示例"vimrc"文件的内容：
   - :r $VIMRUNTIME/vimrc_example.vim

3. 使用以下命令将文件保存：
   - :w

下次启动Vim时，它将使用语法高亮功能。
您可以将所有首选设置添加到这个"vimrc"文件中。
有关更多信息，请输入 :help vimrc-intro。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lesson 7.3: 自动完成


      ** 使用CTRL-D和<TAB>进行命令行自动完成 **

  1. 确保Vim不处于兼容模式:  :set nocp

  2. 查看目录中存在的文件:  :!ls   或者  :!dir

  3. 输入一个命令的开头:  :e

  4. 按下CTRL-D，Vim将显示以"e"开头的命令列表。

  5. 输入  d<TAB> ，Vim将自动完成命令为":edit"。

  6. 现在添加一个空格和一个已存在的文件名的开头:  :edit FIL

  7. 按下<TAB>。如果文件名是唯一的，Vim将自动完成它。

注意: 自动完成适用于许多命令。只需尝试按下CTRL-D和<TAB>。它对于 :help 特别有用。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       Lesson 7 总结


  1. 输入  :help  或者按下 <F1> 或者 <HELP> 打开帮助窗口。

  2. 输入  :help cmd  查找关于 cmd 的帮助。

  3. 输入  CTRL-W CTRL-W  跳转到另一个窗口。

  4. 输入  :q  关闭帮助窗口。

  5. 创建一个 vimrc 启动脚本来保持您的首选设置。

  6. 在输入  :  命令时，按下 CTRL-D 来查看可能的自动完成。按下 <TAB> 使用一个自动完成。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

这就是Vim Tutor的全部内容。它旨在对Vim编辑器进行简要概述，足以让您能够相对轻松地使用该编辑器。然而，由于Vim有许多其他命令，它远非完整的。接下来请阅读用户手册：":help user-manual"。

如果想进一步阅读和学习，推荐以下书籍：
《Vim - Vi Improved》 - 作者：Steve Oualline
出版社：New Riders
这是第一本完全专注于Vim的书籍。对初学者特别有用。书中有许多示例和图片。
请访问：https://iccf-holland.org/click5.html

这本书更早，更多关于Vi而非Vim，但同样值得推荐：
《Learning the Vi Editor》 - 作者：Linda Lamb
出版社：O'Reilly & Associates Inc.
这是一本了解几乎所有与Vi相关操作的好书。第六版还包含有关Vim的信息。

本教程由Michael C. Pierce和Robert K. Ware撰写，他们是科罗拉多矿业学院的学者，并得到了科罗拉多州立大学的Charles Smith提供的想法。电子邮件：bware@mines.colorado.edu。

Vim的修改版由Bram Moolenaar完成。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
